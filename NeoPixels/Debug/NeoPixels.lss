
NeoPixels.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800100  000004dc  00000570  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000004dc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000007  00800108  00800108  00000578  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000578  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000005a8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  000005e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000e09  00000000  00000000  00000648  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008e2  00000000  00000000  00001451  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000622  00000000  00000000  00001d33  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000012c  00000000  00000000  00002358  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004fd  00000000  00000000  00002484  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000078b  00000000  00000000  00002981  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b0  00000000  00000000  0000310c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
   8:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
   c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  10:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  14:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  18:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  1c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  20:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  24:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  28:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  2c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  30:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  34:	0c 94 23 02 	jmp	0x446	; 0x446 <__vector_13>
  38:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  3c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  40:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  44:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  48:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  4c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  50:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  54:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  58:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  5c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  60:	0c 94 0b 02 	jmp	0x416	; 0x416 <__vector_24>
  64:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  68:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  6c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  70:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  74:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  78:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	d4 e0       	ldi	r29, 0x04	; 4
  84:	de bf       	out	0x3e, r29	; 62
  86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_copy_data>:
  88:	11 e0       	ldi	r17, 0x01	; 1
  8a:	a0 e0       	ldi	r26, 0x00	; 0
  8c:	b1 e0       	ldi	r27, 0x01	; 1
  8e:	ec ed       	ldi	r30, 0xDC	; 220
  90:	f4 e0       	ldi	r31, 0x04	; 4
  92:	02 c0       	rjmp	.+4      	; 0x98 <__do_copy_data+0x10>
  94:	05 90       	lpm	r0, Z+
  96:	0d 92       	st	X+, r0
  98:	a8 30       	cpi	r26, 0x08	; 8
  9a:	b1 07       	cpc	r27, r17
  9c:	d9 f7       	brne	.-10     	; 0x94 <__do_copy_data+0xc>

0000009e <__do_clear_bss>:
  9e:	21 e0       	ldi	r18, 0x01	; 1
  a0:	a8 e0       	ldi	r26, 0x08	; 8
  a2:	b1 e0       	ldi	r27, 0x01	; 1
  a4:	01 c0       	rjmp	.+2      	; 0xa8 <.do_clear_bss_start>

000000a6 <.do_clear_bss_loop>:
  a6:	1d 92       	st	X+, r1

000000a8 <.do_clear_bss_start>:
  a8:	af 30       	cpi	r26, 0x0F	; 15
  aa:	b2 07       	cpc	r27, r18
  ac:	e1 f7       	brne	.-8      	; 0xa6 <.do_clear_bss_loop>
  ae:	0e 94 77 01 	call	0x2ee	; 0x2ee <main>
  b2:	0c 94 6c 02 	jmp	0x4d8	; 0x4d8 <_exit>

000000b6 <__bad_interrupt>:
  b6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ba <sendByte>:
*/
void setMUX(char pin){
	ADMUX &= ~( 1 << MUX0 ) & ~( 1 << MUX1 ) & ~( 1 << MUX2 );		// Reset the MUX pins
	
	// Loop through each bit of our pin and update the register with the information.
	for(int j = 0; j < 3; j++)		
  ba:	31 e0       	ldi	r19, 0x01	; 1
  bc:	01 c0       	rjmp	.+2      	; 0xc0 <sendByte+0x6>
  be:	33 0f       	add	r19, r19
  c0:	6a 95       	dec	r22
  c2:	ea f7       	brpl	.-6      	; 0xbe <sendByte+0x4>
  c4:	e8 e0       	ldi	r30, 0x08	; 8
  c6:	f1 e0       	ldi	r31, 0x01	; 1
  c8:	40 e0       	ldi	r20, 0x00	; 0
  ca:	51 e0       	ldi	r21, 0x01	; 1
  cc:	92 91       	ld	r25, -Z
  ce:	29 2f       	mov	r18, r25
  d0:	28 23       	and	r18, r24
  d2:	92 13       	cpse	r25, r18
  d4:	0a c0       	rjmp	.+20     	; 0xea <sendByte+0x30>
  d6:	3b b9       	out	0x0b, r19	; 11
  d8:	94 e0       	ldi	r25, 0x04	; 4
  da:	9a 95       	dec	r25
  dc:	f1 f7       	brne	.-4      	; 0xda <sendByte+0x20>
  de:	00 c0       	rjmp	.+0      	; 0xe0 <sendByte+0x26>
  e0:	1b b8       	out	0x0b, r1	; 11
  e2:	94 e0       	ldi	r25, 0x04	; 4
  e4:	9a 95       	dec	r25
  e6:	f1 f7       	brne	.-4      	; 0xe4 <sendByte+0x2a>
  e8:	0a c0       	rjmp	.+20     	; 0xfe <sendByte+0x44>
  ea:	3b b9       	out	0x0b, r19	; 11
  ec:	92 e0       	ldi	r25, 0x02	; 2
  ee:	9a 95       	dec	r25
  f0:	f1 f7       	brne	.-4      	; 0xee <sendByte+0x34>
  f2:	00 00       	nop
  f4:	1b b8       	out	0x0b, r1	; 11
  f6:	95 e0       	ldi	r25, 0x05	; 5
  f8:	9a 95       	dec	r25
  fa:	f1 f7       	brne	.-4      	; 0xf8 <sendByte+0x3e>
  fc:	00 00       	nop
  fe:	e4 17       	cp	r30, r20
 100:	f5 07       	cpc	r31, r21
 102:	21 f7       	brne	.-56     	; 0xcc <sendByte+0x12>
 104:	08 95       	ret

00000106 <sendCol>:
 106:	1f 93       	push	r17
 108:	cf 93       	push	r28
 10a:	df 93       	push	r29
 10c:	16 2f       	mov	r17, r22
 10e:	d4 2f       	mov	r29, r20
 110:	c2 2f       	mov	r28, r18
 112:	62 2f       	mov	r22, r18
 114:	0e 94 5d 00 	call	0xba	; 0xba <sendByte>
 118:	6c 2f       	mov	r22, r28
 11a:	81 2f       	mov	r24, r17
 11c:	0e 94 5d 00 	call	0xba	; 0xba <sendByte>
 120:	6c 2f       	mov	r22, r28
 122:	8d 2f       	mov	r24, r29
 124:	0e 94 5d 00 	call	0xba	; 0xba <sendByte>
 128:	df 91       	pop	r29
 12a:	cf 91       	pop	r28
 12c:	1f 91       	pop	r17
 12e:	08 95       	ret

00000130 <displayUpdate>:
 130:	9f 92       	push	r9
 132:	af 92       	push	r10
 134:	bf 92       	push	r11
 136:	cf 92       	push	r12
 138:	df 92       	push	r13
 13a:	ef 92       	push	r14
 13c:	ff 92       	push	r15
 13e:	0f 93       	push	r16
 140:	1f 93       	push	r17
 142:	cf 93       	push	r28
 144:	df 93       	push	r29
 146:	e6 2e       	mov	r14, r22
 148:	f7 2e       	mov	r15, r23
 14a:	08 2f       	mov	r16, r24
 14c:	19 2f       	mov	r17, r25
 14e:	f8 94       	cli
 150:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <cMode>
 154:	81 30       	cpi	r24, 0x01	; 1
 156:	39 f0       	breq	.+14     	; 0x166 <displayUpdate+0x36>
 158:	48 f0       	brcs	.+18     	; 0x16c <displayUpdate+0x3c>
 15a:	82 30       	cpi	r24, 0x02	; 2
 15c:	09 f0       	breq	.+2      	; 0x160 <displayUpdate+0x30>
 15e:	9a c0       	rjmp	.+308    	; 0x294 <displayUpdate+0x164>
 160:	71 11       	cpse	r23, r1
 162:	3a c0       	rjmp	.+116    	; 0x1d8 <displayUpdate+0xa8>
 164:	97 c0       	rjmp	.+302    	; 0x294 <displayUpdate+0x164>
 166:	71 11       	cpse	r23, r1
 168:	79 c0       	rjmp	.+242    	; 0x25c <displayUpdate+0x12c>
 16a:	94 c0       	rjmp	.+296    	; 0x294 <displayUpdate+0x164>
 16c:	77 23       	and	r23, r23
 16e:	09 f4       	brne	.+2      	; 0x172 <displayUpdate+0x42>
 170:	91 c0       	rjmp	.+290    	; 0x294 <displayUpdate+0x164>
 172:	c0 e0       	ldi	r28, 0x00	; 0
 174:	d0 e0       	ldi	r29, 0x00	; 0
 176:	c7 2e       	mov	r12, r23
 178:	d1 2c       	mov	r13, r1
 17a:	56 01       	movw	r10, r12
 17c:	83 e0       	ldi	r24, 0x03	; 3
 17e:	a8 1a       	sub	r10, r24
 180:	b1 08       	sbc	r11, r1
 182:	e1 e0       	ldi	r30, 0x01	; 1
 184:	ce 1a       	sub	r12, r30
 186:	d1 08       	sbc	r13, r1
 188:	c0 17       	cp	r28, r16
 18a:	d1 07       	cpc	r29, r17
 18c:	dc f4       	brge	.+54     	; 0x1c4 <displayUpdate+0x94>
 18e:	ca 15       	cp	r28, r10
 190:	db 05       	cpc	r29, r11
 192:	3c f4       	brge	.+14     	; 0x1a2 <displayUpdate+0x72>
 194:	2e 2d       	mov	r18, r14
 196:	40 e0       	ldi	r20, 0x00	; 0
 198:	6f ef       	ldi	r22, 0xFF	; 255
 19a:	80 e0       	ldi	r24, 0x00	; 0
 19c:	0e 94 83 00 	call	0x106	; 0x106 <sendCol>
 1a0:	17 c0       	rjmp	.+46     	; 0x1d0 <displayUpdate+0xa0>
 1a2:	cc 15       	cp	r28, r12
 1a4:	dd 05       	cpc	r29, r13
 1a6:	3c f4       	brge	.+14     	; 0x1b6 <displayUpdate+0x86>
 1a8:	2e 2d       	mov	r18, r14
 1aa:	40 e0       	ldi	r20, 0x00	; 0
 1ac:	6f ef       	ldi	r22, 0xFF	; 255
 1ae:	8f ef       	ldi	r24, 0xFF	; 255
 1b0:	0e 94 83 00 	call	0x106	; 0x106 <sendCol>
 1b4:	0d c0       	rjmp	.+26     	; 0x1d0 <displayUpdate+0xa0>
 1b6:	2e 2d       	mov	r18, r14
 1b8:	40 e0       	ldi	r20, 0x00	; 0
 1ba:	60 e0       	ldi	r22, 0x00	; 0
 1bc:	8f ef       	ldi	r24, 0xFF	; 255
 1be:	0e 94 83 00 	call	0x106	; 0x106 <sendCol>
 1c2:	06 c0       	rjmp	.+12     	; 0x1d0 <displayUpdate+0xa0>
 1c4:	2e 2d       	mov	r18, r14
 1c6:	40 e0       	ldi	r20, 0x00	; 0
 1c8:	60 e0       	ldi	r22, 0x00	; 0
 1ca:	80 e0       	ldi	r24, 0x00	; 0
 1cc:	0e 94 83 00 	call	0x106	; 0x106 <sendCol>
 1d0:	21 96       	adiw	r28, 0x01	; 1
 1d2:	cf 15       	cp	r28, r15
 1d4:	c8 f2       	brcs	.-78     	; 0x188 <displayUpdate+0x58>
 1d6:	5e c0       	rjmp	.+188    	; 0x294 <displayUpdate+0x164>
 1d8:	0f 2e       	mov	r0, r31
 1da:	f0 e7       	ldi	r31, 0x70	; 112
 1dc:	df 2e       	mov	r13, r31
 1de:	f0 2d       	mov	r31, r0
 1e0:	c0 e0       	ldi	r28, 0x00	; 0
 1e2:	d0 e0       	ldi	r29, 0x00	; 0
 1e4:	c1 2c       	mov	r12, r1
 1e6:	58 01       	movw	r10, r16
 1e8:	83 e0       	ldi	r24, 0x03	; 3
 1ea:	a8 1a       	sub	r10, r24
 1ec:	b1 08       	sbc	r11, r1
 1ee:	0f 2e       	mov	r0, r31
 1f0:	fc e1       	ldi	r31, 0x1C	; 28
 1f2:	9f 2e       	mov	r9, r31
 1f4:	f0 2d       	mov	r31, r0
 1f6:	c0 17       	cp	r28, r16
 1f8:	d1 07       	cpc	r29, r17
 1fa:	24 f5       	brge	.+72     	; 0x244 <displayUpdate+0x114>
 1fc:	ca 15       	cp	r28, r10
 1fe:	db 05       	cpc	r29, r11
 200:	3c f4       	brge	.+14     	; 0x210 <displayUpdate+0xe0>
 202:	2e 2d       	mov	r18, r14
 204:	40 e0       	ldi	r20, 0x00	; 0
 206:	60 e0       	ldi	r22, 0x00	; 0
 208:	80 e0       	ldi	r24, 0x00	; 0
 20a:	0e 94 83 00 	call	0x106	; 0x106 <sendCol>
 20e:	20 c0       	rjmp	.+64     	; 0x250 <displayUpdate+0x120>
 210:	03 30       	cpi	r16, 0x03	; 3
 212:	11 05       	cpc	r17, r1
 214:	6c f0       	brlt	.+26     	; 0x230 <displayUpdate+0x100>
 216:	c3 94       	inc	r12
 218:	cc 9c       	mul	r12, r12
 21a:	80 2d       	mov	r24, r0
 21c:	11 24       	eor	r1, r1
 21e:	89 9d       	mul	r24, r9
 220:	80 2d       	mov	r24, r0
 222:	11 24       	eor	r1, r1
 224:	2e 2d       	mov	r18, r14
 226:	48 2f       	mov	r20, r24
 228:	68 2f       	mov	r22, r24
 22a:	0e 94 83 00 	call	0x106	; 0x106 <sendCol>
 22e:	10 c0       	rjmp	.+32     	; 0x250 <displayUpdate+0x120>
 230:	2e 2d       	mov	r18, r14
 232:	4d 2d       	mov	r20, r13
 234:	6d 2d       	mov	r22, r13
 236:	8d 2d       	mov	r24, r13
 238:	0e 94 83 00 	call	0x106	; 0x106 <sendCol>
 23c:	68 94       	set
 23e:	cc 24       	eor	r12, r12
 240:	c2 f8       	bld	r12, 2
 242:	06 c0       	rjmp	.+12     	; 0x250 <displayUpdate+0x120>
 244:	2e 2d       	mov	r18, r14
 246:	40 e0       	ldi	r20, 0x00	; 0
 248:	60 e0       	ldi	r22, 0x00	; 0
 24a:	80 e0       	ldi	r24, 0x00	; 0
 24c:	0e 94 83 00 	call	0x106	; 0x106 <sendCol>
 250:	21 96       	adiw	r28, 0x01	; 1
 252:	e0 e7       	ldi	r30, 0x70	; 112
 254:	de 0e       	add	r13, r30
 256:	cf 15       	cp	r28, r15
 258:	70 f2       	brcs	.-100    	; 0x1f6 <displayUpdate+0xc6>
 25a:	1c c0       	rjmp	.+56     	; 0x294 <displayUpdate+0x164>
 25c:	c0 e0       	ldi	r28, 0x00	; 0
 25e:	d0 e0       	ldi	r29, 0x00	; 0
 260:	0f 2e       	mov	r0, r31
 262:	f8 e0       	ldi	r31, 0x08	; 8
 264:	cf 2e       	mov	r12, r31
 266:	f1 e0       	ldi	r31, 0x01	; 1
 268:	df 2e       	mov	r13, r31
 26a:	f0 2d       	mov	r31, r0
 26c:	c0 17       	cp	r28, r16
 26e:	d1 07       	cpc	r29, r17
 270:	44 f4       	brge	.+16     	; 0x282 <displayUpdate+0x152>
 272:	f6 01       	movw	r30, r12
 274:	42 81       	ldd	r20, Z+2	; 0x02
 276:	61 81       	ldd	r22, Z+1	; 0x01
 278:	80 81       	ld	r24, Z
 27a:	2e 2d       	mov	r18, r14
 27c:	0e 94 83 00 	call	0x106	; 0x106 <sendCol>
 280:	06 c0       	rjmp	.+12     	; 0x28e <displayUpdate+0x15e>
 282:	2e 2d       	mov	r18, r14
 284:	40 e0       	ldi	r20, 0x00	; 0
 286:	60 e0       	ldi	r22, 0x00	; 0
 288:	80 e0       	ldi	r24, 0x00	; 0
 28a:	0e 94 83 00 	call	0x106	; 0x106 <sendCol>
 28e:	21 96       	adiw	r28, 0x01	; 1
 290:	cf 15       	cp	r28, r15
 292:	60 f3       	brcs	.-40     	; 0x26c <displayUpdate+0x13c>
 294:	78 94       	sei
 296:	df 91       	pop	r29
 298:	cf 91       	pop	r28
 29a:	1f 91       	pop	r17
 29c:	0f 91       	pop	r16
 29e:	ff 90       	pop	r15
 2a0:	ef 90       	pop	r14
 2a2:	df 90       	pop	r13
 2a4:	cf 90       	pop	r12
 2a6:	bf 90       	pop	r11
 2a8:	af 90       	pop	r10
 2aa:	9f 90       	pop	r9
 2ac:	08 95       	ret

000002ae <setMode>:
/*
	A function that sets the display mode of the LEDs
*/
void setMode(char MODE)
{
	cMode = MODE;		// Set the current mode to the selected mode
 2ae:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <cMode>
	
	switch(cMode)
 2b2:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <cMode>
 2b6:	81 30       	cpi	r24, 0x01	; 1
 2b8:	49 f4       	brne	.+18     	; 0x2cc <setMode+0x1e>
	{
		case RAINBOW:
			TIMSK1 |= ( 1 << OCIE1A );		// Enable CTC timer interrupts
 2ba:	ef e6       	ldi	r30, 0x6F	; 111
 2bc:	f0 e0       	ldi	r31, 0x00	; 0
 2be:	80 81       	ld	r24, Z
 2c0:	82 60       	ori	r24, 0x02	; 2
 2c2:	80 83       	st	Z, r24
			rCol[1] = Brightness;			// Set initial color
 2c4:	8f ef       	ldi	r24, 0xFF	; 255
 2c6:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <__data_end+0x1>
		break;
 2ca:	08 95       	ret
			
		default:
			TIMSK1 &= ~( 1 << OCIE1A );		// Disable CTC timer interrupts
 2cc:	ef e6       	ldi	r30, 0x6F	; 111
 2ce:	f0 e0       	ldi	r31, 0x00	; 0
 2d0:	80 81       	ld	r24, Z
 2d2:	8d 7f       	andi	r24, 0xFD	; 253
 2d4:	80 83       	st	Z, r24
 2d6:	08 95       	ret

000002d8 <strobeEqualiser>:

/*
	This function strobes the equaliser in order to switch the bandpass range. 
*/
void strobeEqualiser(){
		ControlPort |= (1 << PB0);		// Send strobe high
 2d8:	28 9a       	sbi	0x05, 0	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2da:	88 e7       	ldi	r24, 0x78	; 120
 2dc:	8a 95       	dec	r24
 2de:	f1 f7       	brne	.-4      	; 0x2dc <strobeEqualiser+0x4>
		_delay_us(18);					// Wait 18us
		ControlPort &= ~(1 << PB0);		// Send strobe low
 2e0:	28 98       	cbi	0x05, 0	; 5
		ADCSRA |= ( 1 << ADSC );		// Start a conversion
 2e2:	ea e7       	ldi	r30, 0x7A	; 122
 2e4:	f0 e0       	ldi	r31, 0x00	; 0
 2e6:	80 81       	ld	r24, Z
 2e8:	80 64       	ori	r24, 0x40	; 64
 2ea:	80 83       	st	Z, r24
 2ec:	08 95       	ret

000002ee <main>:
};


int main(void)
{
 2ee:	cf 93       	push	r28
 2f0:	df 93       	push	r29
 2f2:	cd b7       	in	r28, 0x3d	; 61
 2f4:	de b7       	in	r29, 0x3e	; 62
 2f6:	a0 97       	sbiw	r28, 0x20	; 32
 2f8:	0f b6       	in	r0, 0x3f	; 63
 2fa:	f8 94       	cli
 2fc:	de bf       	out	0x3e, r29	; 62
 2fe:	0f be       	out	0x3f, r0	; 63
 300:	cd bf       	out	0x3d, r28	; 61
 302:	fe 01       	movw	r30, r28
 304:	31 96       	adiw	r30, 0x01	; 1
	Strip stripArr[ NumOfStrips ];				// Create an array of strips depending on the number of strips we have
	int numLED = 0;								// Create an int to store the number of LEDs to display
	
	for(int i = 0; i < NumOfStrips; i++)		// Initialize our array based on the number of strips
 306:	80 e0       	ldi	r24, 0x00	; 0
 308:	90 e0       	ldi	r25, 0x00	; 0
	{
		LEDState |= ( 1 << i );				// Set the port output state.
 30a:	61 e0       	ldi	r22, 0x01	; 1
 30c:	70 e0       	ldi	r23, 0x00	; 0
		stripArr[i].pin = i;					// The pin of current strip will be equal to it's position in the strip array
		stripArr[i].numLEDs = StripLength;		// The number of LEDs will be equal to the length of strip defined in the header
 30e:	48 e0       	ldi	r20, 0x08	; 8
	Strip stripArr[ NumOfStrips ];				// Create an array of strips depending on the number of strips we have
	int numLED = 0;								// Create an int to store the number of LEDs to display
	
	for(int i = 0; i < NumOfStrips; i++)		// Initialize our array based on the number of strips
	{
		LEDState |= ( 1 << i );				// Set the port output state.
 310:	5a b1       	in	r21, 0x0a	; 10
 312:	9b 01       	movw	r18, r22
 314:	08 2e       	mov	r0, r24
 316:	02 c0       	rjmp	.+4      	; 0x31c <main+0x2e>
 318:	22 0f       	add	r18, r18
 31a:	33 1f       	adc	r19, r19
 31c:	0a 94       	dec	r0
 31e:	e2 f7       	brpl	.-8      	; 0x318 <main+0x2a>
 320:	25 2b       	or	r18, r21
 322:	2a b9       	out	0x0a, r18	; 10
		stripArr[i].pin = i;					// The pin of current strip will be equal to it's position in the strip array
 324:	80 83       	st	Z, r24
		stripArr[i].numLEDs = StripLength;		// The number of LEDs will be equal to the length of strip defined in the header
 326:	41 83       	std	Z+1, r20	; 0x01
		stripArr[i].displayNum = 0;				// Set the current number of displayed LED's to 0 (i + 1 for testing)
 328:	13 82       	std	Z+3, r1	; 0x03
 32a:	12 82       	std	Z+2, r1	; 0x02
int main(void)
{
	Strip stripArr[ NumOfStrips ];				// Create an array of strips depending on the number of strips we have
	int numLED = 0;								// Create an int to store the number of LEDs to display
	
	for(int i = 0; i < NumOfStrips; i++)		// Initialize our array based on the number of strips
 32c:	01 96       	adiw	r24, 0x01	; 1
 32e:	34 96       	adiw	r30, 0x04	; 4
 330:	88 30       	cpi	r24, 0x08	; 8
 332:	91 05       	cpc	r25, r1
 334:	69 f7       	brne	.-38     	; 0x310 <main+0x22>
		stripArr[i].pin = i;					// The pin of current strip will be equal to it's position in the strip array
		stripArr[i].numLEDs = StripLength;		// The number of LEDs will be equal to the length of strip defined in the header
		stripArr[i].displayNum = 0;				// Set the current number of displayed LED's to 0 (i + 1 for testing)
	}
	
	ControlState |= (1 << PA0);		// Set pin 0 on port A as an output
 336:	20 9a       	sbi	0x04, 0	; 4
	
	ADCSRA |= ( 1 << ADEN ) | ( 1 << ADIE ) | ( 1 << ADPS1 ) | ( 1 << ADPS2 );						// Turn on ADC & set prescaler x64 which gives 41.6us per conversion
 338:	ea e7       	ldi	r30, 0x7A	; 122
 33a:	f0 e0       	ldi	r31, 0x00	; 0
 33c:	80 81       	ld	r24, Z
 33e:	8e 68       	ori	r24, 0x8E	; 142
 340:	80 83       	st	Z, r24
	ADMUX |= ( 1 << ADLAR ) | ( 1 << REFS0 );														// Left adjust result and set reference voltage
 342:	ec e7       	ldi	r30, 0x7C	; 124
 344:	f0 e0       	ldi	r31, 0x00	; 0
 346:	80 81       	ld	r24, Z
 348:	80 66       	ori	r24, 0x60	; 96
 34a:	80 83       	st	Z, r24
	
	OCR1A = Compare;																				// Set our timer comparison int
 34c:	89 e7       	ldi	r24, 0x79	; 121
 34e:	98 e0       	ldi	r25, 0x08	; 8
 350:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 354:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	TCCR1B |= ( 1 << WGM12 ) | ( 1 << CS12 );														// Enable CTC timer with 64x prescale
 358:	e1 e8       	ldi	r30, 0x81	; 129
 35a:	f0 e0       	ldi	r31, 0x00	; 0
 35c:	80 81       	ld	r24, Z
 35e:	8c 60       	ori	r24, 0x0C	; 12
 360:	80 83       	st	Z, r24
	
	sei();																							// Enable global interrupts
 362:	78 94       	sei
	
	setMode( RAINBOW );		// Set the display mode
 364:	81 e0       	ldi	r24, 0x01	; 1
 366:	0e 94 57 01 	call	0x2ae	; 0x2ae <setMode>

	/*
		Before we do anything we're going to do our first conversion, this way we don't have to wait in a loop until the ADC finished before
		continuing on in the future. We can set the ADC running and come back to it when we need it.
	*/
	strobeEqualiser();
 36a:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <strobeEqualiser>
				// do nothing
			}
			
			ADCflag = 0;		// Reset the ADC flag
			
			numLED = vSize / ( Accuracy / StripLength );	// Set the number of LEDs to display based on the previous conversion
 36e:	0f 2e       	mov	r0, r31
 370:	f9 e0       	ldi	r31, 0x09	; 9
 372:	af 2e       	mov	r10, r31
 374:	f0 2d       	mov	r31, r0
			strobeEqualiser();									// Start an ADC conversion for the next strip
			
			// Check if the number of LEDs are already being displayed, if they are, save cycles. Or if the current mode is rainbow, carry on.
			if( ( numLED != stripArr[i].displayNum ) | ( cMode == RAINBOW ) )
 376:	bb 24       	eor	r11, r11
 378:	b3 94       	inc	r11
 37a:	91 2c       	mov	r9, r1
int main(void)
{
	Strip stripArr[ NumOfStrips ];				// Create an array of strips depending on the number of strips we have
	int numLED = 0;								// Create an int to store the number of LEDs to display
	
	for(int i = 0; i < NumOfStrips; i++)		// Initialize our array based on the number of strips
 37c:	ce 01       	movw	r24, r28
 37e:	01 96       	adiw	r24, 0x01	; 1
 380:	7c 01       	movw	r14, r24
	strobeEqualiser();
	
    while (1) 
    {
		// Cycle through each strip on the output pins
		for(int i = 0; i < NumOfStrips; i++)
 382:	c1 2c       	mov	r12, r1
 384:	d1 2c       	mov	r13, r1
		{
			// Wait until ADC has been read, if it's still working
			while( ADCflag == 0 )
 386:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <ADCflag>
 38a:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <ADCflag+0x1>
 38e:	89 2b       	or	r24, r25
 390:	d1 f3       	breq	.-12     	; 0x386 <main+0x98>
			{
				// do nothing
			}
			
			ADCflag = 0;		// Reset the ADC flag
 392:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <ADCflag+0x1>
 396:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <ADCflag>
			
			numLED = vSize / ( Accuracy / StripLength );	// Set the number of LEDs to display based on the previous conversion
 39a:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <vSize>
 39e:	8a 9d       	mul	r24, r10
 3a0:	01 2d       	mov	r16, r1
 3a2:	11 24       	eor	r1, r1
 3a4:	80 1b       	sub	r24, r16
 3a6:	86 95       	lsr	r24
 3a8:	08 0f       	add	r16, r24
 3aa:	02 95       	swap	r16
 3ac:	0f 70       	andi	r16, 0x0F	; 15
 3ae:	10 e0       	ldi	r17, 0x00	; 0
			strobeEqualiser();									// Start an ADC conversion for the next strip
 3b0:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <strobeEqualiser>
 3b4:	f7 01       	movw	r30, r14
			
			// Check if the number of LEDs are already being displayed, if they are, save cycles. Or if the current mode is rainbow, carry on.
			if( ( numLED != stripArr[i].displayNum ) | ( cMode == RAINBOW ) )
 3b6:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <cMode>
 3ba:	8b 2d       	mov	r24, r11
 3bc:	22 81       	ldd	r18, Z+2	; 0x02
 3be:	33 81       	ldd	r19, Z+3	; 0x03
 3c0:	20 17       	cp	r18, r16
 3c2:	31 07       	cpc	r19, r17
 3c4:	09 f4       	brne	.+2      	; 0x3c8 <main+0xda>
 3c6:	89 2d       	mov	r24, r9
 3c8:	81 11       	cpse	r24, r1
 3ca:	06 c0       	rjmp	.+12     	; 0x3d8 <main+0xea>
 3cc:	8b 2d       	mov	r24, r11
 3ce:	91 30       	cpi	r25, 0x01	; 1
 3d0:	09 f0       	breq	.+2      	; 0x3d4 <main+0xe6>
 3d2:	89 2d       	mov	r24, r9
 3d4:	88 23       	and	r24, r24
 3d6:	99 f0       	breq	.+38     	; 0x3fe <main+0x110>
			{
				stripArr[i].displayNum = numLED;		// Set the current strips display number to the calculated display number
 3d8:	13 83       	std	Z+3, r17	; 0x03
 3da:	02 83       	std	Z+2, r16	; 0x02
				displayUpdate( stripArr[i] );			// Update the strips display
 3dc:	f6 01       	movw	r30, r12
 3de:	ee 0f       	add	r30, r30
 3e0:	ff 1f       	adc	r31, r31
 3e2:	ee 0f       	add	r30, r30
 3e4:	ff 1f       	adc	r31, r31
 3e6:	a1 e0       	ldi	r26, 0x01	; 1
 3e8:	b0 e0       	ldi	r27, 0x00	; 0
 3ea:	ac 0f       	add	r26, r28
 3ec:	bd 1f       	adc	r27, r29
 3ee:	ea 0f       	add	r30, r26
 3f0:	fb 1f       	adc	r31, r27
 3f2:	60 81       	ld	r22, Z
 3f4:	71 81       	ldd	r23, Z+1	; 0x01
 3f6:	82 81       	ldd	r24, Z+2	; 0x02
 3f8:	93 81       	ldd	r25, Z+3	; 0x03
 3fa:	0e 94 98 00 	call	0x130	; 0x130 <displayUpdate>
	strobeEqualiser();
	
    while (1) 
    {
		// Cycle through each strip on the output pins
		for(int i = 0; i < NumOfStrips; i++)
 3fe:	bf ef       	ldi	r27, 0xFF	; 255
 400:	cb 1a       	sub	r12, r27
 402:	db 0a       	sbc	r13, r27
 404:	84 e0       	ldi	r24, 0x04	; 4
 406:	e8 0e       	add	r14, r24
 408:	f1 1c       	adc	r15, r1
 40a:	98 e0       	ldi	r25, 0x08	; 8
 40c:	c9 16       	cp	r12, r25
 40e:	d1 04       	cpc	r13, r1
 410:	09 f0       	breq	.+2      	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
 412:	b9 cf       	rjmp	.-142    	; 0x386 <main+0x98>
 414:	b3 cf       	rjmp	.-154    	; 0x37c <main+0x8e>

00000416 <__vector_24>:

/*
	ADC interrupt
*/
ISR(ADC_vect)
{
 416:	1f 92       	push	r1
 418:	0f 92       	push	r0
 41a:	0f b6       	in	r0, 0x3f	; 63
 41c:	0f 92       	push	r0
 41e:	11 24       	eor	r1, r1
 420:	8f 93       	push	r24
 422:	9f 93       	push	r25
	ADCflag = 1;	// Set the ADC Flag
 424:	81 e0       	ldi	r24, 0x01	; 1
 426:	90 e0       	ldi	r25, 0x00	; 0
 428:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <ADCflag+0x1>
 42c:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <ADCflag>
	vSize = ADCH;	// Set vSize to the ADC result
 430:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 434:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <vSize>
}
 438:	9f 91       	pop	r25
 43a:	8f 91       	pop	r24
 43c:	0f 90       	pop	r0
 43e:	0f be       	out	0x3f, r0	; 63
 440:	0f 90       	pop	r0
 442:	1f 90       	pop	r1
 444:	18 95       	reti

00000446 <__vector_13>:

/*
	Timer1 interrupt
*/
ISR(TIMER1_COMPA_vect)
{
 446:	1f 92       	push	r1
 448:	0f 92       	push	r0
 44a:	0f b6       	in	r0, 0x3f	; 63
 44c:	0f 92       	push	r0
 44e:	11 24       	eor	r1, r1
 450:	8f 93       	push	r24
 452:	ef 93       	push	r30
 454:	ff 93       	push	r31
	/*
		This cycles the colour values up to the brightness defined in the header, once a colour reaches it's maximum brightness, it
		decreases the previous colours value before increasing the next colours value.
	*/
	if( rCol[0] >= Brightness )
 456:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <__data_end>
 45a:	8f 3f       	cpi	r24, 0xFF	; 255
 45c:	79 f4       	brne	.+30     	; 0x47c <__vector_13+0x36>
	{ 
		if( rCol[2] > 0 ){ rCol[2]--; }
 45e:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end+0x2>
 462:	88 23       	and	r24, r24
 464:	31 f0       	breq	.+12     	; 0x472 <__vector_13+0x2c>
 466:	e8 e0       	ldi	r30, 0x08	; 8
 468:	f1 e0       	ldi	r31, 0x01	; 1
 46a:	82 81       	ldd	r24, Z+2	; 0x02
 46c:	81 50       	subi	r24, 0x01	; 1
 46e:	82 83       	std	Z+2, r24	; 0x02
 470:	05 c0       	rjmp	.+10     	; 0x47c <__vector_13+0x36>
		else{ rCol[1]++; } 
 472:	e8 e0       	ldi	r30, 0x08	; 8
 474:	f1 e0       	ldi	r31, 0x01	; 1
 476:	81 81       	ldd	r24, Z+1	; 0x01
 478:	8f 5f       	subi	r24, 0xFF	; 255
 47a:	81 83       	std	Z+1, r24	; 0x01
	}
	
	if( rCol[1] >= Brightness )
 47c:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <__data_end+0x1>
 480:	8f 3f       	cpi	r24, 0xFF	; 255
 482:	79 f4       	brne	.+30     	; 0x4a2 <__vector_13+0x5c>
	{ 
		if( rCol[0] > 0 ){ rCol[0]--; }
 484:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <__data_end>
 488:	88 23       	and	r24, r24
 48a:	31 f0       	breq	.+12     	; 0x498 <__vector_13+0x52>
 48c:	e8 e0       	ldi	r30, 0x08	; 8
 48e:	f1 e0       	ldi	r31, 0x01	; 1
 490:	80 81       	ld	r24, Z
 492:	81 50       	subi	r24, 0x01	; 1
 494:	80 83       	st	Z, r24
 496:	05 c0       	rjmp	.+10     	; 0x4a2 <__vector_13+0x5c>
		else{ rCol[2]++; } 
 498:	e8 e0       	ldi	r30, 0x08	; 8
 49a:	f1 e0       	ldi	r31, 0x01	; 1
 49c:	82 81       	ldd	r24, Z+2	; 0x02
 49e:	8f 5f       	subi	r24, 0xFF	; 255
 4a0:	82 83       	std	Z+2, r24	; 0x02
	}
	
	if( rCol[2] >= Brightness )
 4a2:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end+0x2>
 4a6:	8f 3f       	cpi	r24, 0xFF	; 255
 4a8:	79 f4       	brne	.+30     	; 0x4c8 <__vector_13+0x82>
	{ 
		if( rCol[1] > 0 ){ rCol[1]--; }
 4aa:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <__data_end+0x1>
 4ae:	88 23       	and	r24, r24
 4b0:	31 f0       	breq	.+12     	; 0x4be <__vector_13+0x78>
 4b2:	e8 e0       	ldi	r30, 0x08	; 8
 4b4:	f1 e0       	ldi	r31, 0x01	; 1
 4b6:	81 81       	ldd	r24, Z+1	; 0x01
 4b8:	81 50       	subi	r24, 0x01	; 1
 4ba:	81 83       	std	Z+1, r24	; 0x01
 4bc:	05 c0       	rjmp	.+10     	; 0x4c8 <__vector_13+0x82>
		else{ rCol[0]++; } 
 4be:	e8 e0       	ldi	r30, 0x08	; 8
 4c0:	f1 e0       	ldi	r31, 0x01	; 1
 4c2:	80 81       	ld	r24, Z
 4c4:	8f 5f       	subi	r24, 0xFF	; 255
 4c6:	80 83       	st	Z, r24
	}
	
 4c8:	ff 91       	pop	r31
 4ca:	ef 91       	pop	r30
 4cc:	8f 91       	pop	r24
 4ce:	0f 90       	pop	r0
 4d0:	0f be       	out	0x3f, r0	; 63
 4d2:	0f 90       	pop	r0
 4d4:	1f 90       	pop	r1
 4d6:	18 95       	reti

000004d8 <_exit>:
 4d8:	f8 94       	cli

000004da <__stop_program>:
 4da:	ff cf       	rjmp	.-2      	; 0x4da <__stop_program>
